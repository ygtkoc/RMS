@model Dastone.Models.Lokasyon

<form id="createLocationForm" asp-action="CreateLocation" asp-controller="Parameters" method="post">
    @Html.AntiForgeryToken()
    <div class="mb-3">
        <label asp-for="LokasyonAdi" class="form-label">Lokasyon Adı <span class="text-danger">*</span></label>
        <input asp-for="LokasyonAdi" class="form-control" required maxlength="100" />
        <span asp-validation-for="LokasyonAdi" class="text-danger"></span>
    </div>
    <div class="mb-3">
        <label asp-for="Aciklama" class="form-label">Açıklama</label>
        <textarea asp-for="Aciklama" class="form-control" rows="3" maxlength="250"></textarea>
        <span asp-validation-for="Aciklama" class="text-danger"></span>
    </div>
    <button type="submit" class="btn btn-primary w-100">Oluştur</button>
    <div class="mt-3 form-message"></div>
</form>

<script>
    (function () {
        const $form = $('#createLocationForm');

        $form.on('submit', function (e) {
            e.preventDefault();

            if (!$form.valid()) {
                return;
            }

            $.ajax({
                url: $form.attr('action'),
                type: 'POST',
                data: $form.serialize(),
                headers: {
                    'RequestVerificationToken': $form.find('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    const $message = $form.find('.form-message');
                    if (response.success) {
                        $message.text(response.message).removeClass('alert-danger').addClass('alert alert-success');
                        if (typeof showGlobalAlert === 'function') {
                            showGlobalAlert(response.message || 'Lokasyon oluşturuldu.', 'success');
                        }

                        if (typeof updateTabCount === 'function' && typeof response.totalCount !== 'undefined') {
                            updateTabCount('location', response.totalCount);
                        }

                        const offcanvasElement = $form.closest('.offcanvas-body').closest('.offcanvas')[0];
                        const offcanvasInstance = bootstrap.Offcanvas.getInstance(offcanvasElement);
                        if (offcanvasInstance) {
                            offcanvasInstance.hide();
                        }

                        if (typeof loadLocationList === 'function') {
                            const query = $('#locationDefinitions').find('#locationSearchInput').val() || '';
                            loadLocationList(1, query);
                        } else {
                            window.location.reload();
                        }
                    } else {
                        $message.text(response.message || 'Oluşturma başarısız.').removeClass('alert-success').addClass('alert alert-danger');
                        if (response.errors) {
                            for (const key in response.errors) {
                                const $errorSpan = $form.find(`span[data-valmsg-for="${key}"]`);
                                if ($errorSpan.length) {
                                    $errorSpan.text(response.errors[key].join(', '));
                                }
                            }
                        }
                        toastr.error(response.message || 'Lokasyon oluşturulamadı.');
                    }
                },
                error: function (xhr) {
                    $form.find('.form-message').text(`Sunucu hatası: ${xhr.statusText}`).removeClass('alert-success').addClass('alert alert-danger');
                    toastr.error(`Sunucu hatası: ${xhr.statusText}`);
                }
            });
        });
    })();
</script>
