@model Dastone.Models.LocationPartialViewModel
@Html.AntiForgeryToken()

<div class="location-meta d-none"
     data-total-count="@(Model?.TotalCount ?? 0)"
     data-current-page="@(Model?.PageNumber ?? 1)"
     data-page-size="@(Model?.PageSize ?? 10)"></div>

<div class="card" style="margin-top: 15px;">
    <div class="card-header">
        <div class="row align-items-center">
            <div class="col">
                <h4 class="card-title">Lokasyon Tanımları</h4>
            </div>
            <div class="col-auto">
                <div class="input-group input-group-sm">
                    <input type="text" class="form-control" id="locationSearchInput" placeholder="Ara (Ad / Açıklama)" value="@Model?.SearchQuery" />
                    <button class="btn btn-outline-secondary" type="button" id="btnSearchLocation" title="Ara">
                        <i class="ri-search-line"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped table-hover mb-0">
                <thead>
                    <tr>
                        <th style="width: 120px;">ID</th>
                        <th>Lokasyon Adı</th>
                        <th>Açıklama</th>
                        <th class="text-end" style="width: 120px;">İşlemler</th>
                    </tr>
                </thead>
                <tbody>
                @if (Model?.Locations != null && Model.Locations.Any())
                {
                    foreach (var location in Model.Locations)
                    {
                        <tr>
                            <td>@location.LokasyonID</td>
                            <td>@location.LokasyonAdi</td>
                            <td>@location.Aciklama</td>
                            <td class="text-end">
                                <button type="button" class="btn btn-outline-danger btn-sm delete-location-btn"
                                        data-id="@location.LokasyonID"
                                        data-name="@location.LokasyonAdi">
                                    <i class="ri-delete-bin-line"></i>
                                </button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4" class="text-center text-muted">Kayıt bulunamadı.</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
        <div class="d-flex justify-content-between align-items-center mt-3">
            <small class="text-muted">Sayfa @(Model?.PageNumber ?? 1) / @(Model?.TotalPages ?? 1)</small>
            <nav aria-label="Lokasyon sayfalama">
                <ul class="pagination pagination-sm mb-0">
                    <li class="page-item @((Model?.PageNumber ?? 1) <= 1 ? "disabled" : string.Empty)">
                        <a class="page-link" href="#" data-page="@((Model?.PageNumber ?? 1) - 1)">Önceki</a>
                    </li>
                    @if (Model?.TotalPages > 0)
                    {
                        for (int i = 1; i <= Model.TotalPages; i++)
                        {
                            <li class="page-item @(i == (Model?.PageNumber ?? 1) ? "active" : string.Empty)">
                                <a class="page-link" href="#" data-page="@i">@i</a>
                            </li>
                        }
                    }
                    <li class="page-item @((Model?.PageNumber ?? 1) >= (Model?.TotalPages ?? 1) ? "disabled" : string.Empty)">
                        <a class="page-link" href="#" data-page="@((Model?.PageNumber ?? 1) + 1)">Sonraki</a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

<script>
    (function () {
        const $tabContainer = $('#locationDefinitions');
        const deleteUrl = '@Url.Action("DeleteLocation", "Parameters")';

        function getMeta() {
            const $meta = $tabContainer.find('.location-meta').first();
            return {
                totalCount: parseInt($meta.data('total-count') || 0, 10),
                currentPage: parseInt($meta.data('current-page') || 1, 10),
                pageSize: parseInt($meta.data('page-size') || 10, 10)
            };
        }

        function updateLocationTabCount() {
            const meta = getMeta();
            if (typeof updateTabCount === 'function') {
                updateTabCount('location', meta.totalCount);
            } else {
                const $count = $('#locationTabCount');
                if ($count.length) {
                    $count.text(meta.totalCount);
                }
            }
        }

        function getAntiForgeryToken() {
            return $tabContainer.find('input[name="__RequestVerificationToken"]').first().val()
                || $('input[name="__RequestVerificationToken"]').first().val();
        }

        function bindLocationEvents() {
            $tabContainer.off('click', '#btnSearchLocation').on('click', '#btnSearchLocation', function () {
                const query = $tabContainer.find('#locationSearchInput').val() || '';
                loadLocationList(1, query);
            });

            $tabContainer.off('keypress', '#locationSearchInput').on('keypress', '#locationSearchInput', function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                    const query = $(this).val() || '';
                    loadLocationList(1, query);
                }
            });

            $tabContainer.off('click', '.pagination a.page-link').on('click', '.pagination a.page-link', function (e) {
                e.preventDefault();
                const page = $(this).data('page');
                if (!page) {
                    return;
                }
                const query = $tabContainer.find('#locationSearchInput').val() || '';
                loadLocationList(page, query);
            });

            $tabContainer.off('click', '.delete-location-btn').on('click', '.delete-location-btn', function (e) {
                e.preventDefault();
                const $button = $(this);
                const id = $button.data('id');
                const name = $button.data('name') || 'Lokasyon';

                if (!id) {
                    return;
                }

                if (!confirm(`${name} kaydını silmek istediğinize emin misiniz?`)) {
                    return;
                }

                $.ajax({
                    url: deleteUrl,
                    type: 'POST',
                    data: { id },
                    headers: {
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    success: function (response) {
                        if (response.success) {
                            if (typeof showGlobalAlert === 'function') {
                                showGlobalAlert(response.message || `${name} silindi.`, 'success');
                            }
                            if (typeof updateTabCount === 'function' && typeof response.totalCount !== 'undefined') {
                                updateTabCount('location', response.totalCount);
                            }

                            const meta = getMeta();
                            const query = $tabContainer.find('#locationSearchInput').val() || '';
                            let targetPage = meta.currentPage;
                            if (typeof response.totalCount === 'number') {
                                const totalPages = Math.max(1, Math.ceil(response.totalCount / (meta.pageSize || 10)));
                                if (targetPage > totalPages) {
                                    targetPage = totalPages;
                                }
                            }
                            loadLocationList(targetPage, query);
                        } else {
                            if (typeof showGlobalAlert === 'function') {
                                showGlobalAlert(response.message || `${name} silinemedi.`, 'danger');
                            }
                            toastr.error(response.message || 'Lokasyon silinemedi.');
                        }
                    },
                    error: function (xhr) {
                        const message = `Lokasyon silinirken sunucu hatası: ${xhr.statusText}`;
                        if (typeof showGlobalAlert === 'function') {
                            showGlobalAlert(message, 'danger');
                        }
                        toastr.error(message);
                    }
                });
            });
        }

        bindLocationEvents();
        updateLocationTabCount();
    })();
</script>
